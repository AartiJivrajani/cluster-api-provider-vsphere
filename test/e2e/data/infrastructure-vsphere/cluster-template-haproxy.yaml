---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: Cluster
metadata:
  name: '${ CLUSTER_NAME }'
  namespace: '${ NAMESPACE }'
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
    kind: KubeadmControlPlane
    name: '${ CLUSTER_NAME }'
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: VSphereCluster
    name: '${ CLUSTER_NAME }'
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: HAProxyLoadBalancer
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: '${ CLUSTER_NAME }'
  name: '${ CLUSTER_NAME }'
  namespace: '${ NAMESPACE }'
spec:
  user:
    authorizedKeys:
    - '${ VSPHERE_SSH_AUTHORIZED_KEY }'
    name: capv
  virtualMachineConfiguration:
    cloneMode: linkedClone
    datacenter: '${ VSPHERE_DATACENTER }'
    datastore: '${ VSPHERE_DATASTORE }'
    diskGiB: 25
    folder: '${ VSPHERE_FOLDER }'
    memoryMiB: 8192
    network:
      devices:
      - dhcp4: true
        networkName: '${ VSPHERE_NETWORK }'
    numCPUs: 2
    resourcePool: '${ VSPHERE_RESOURCE_POOL }'
    server: '${ VSPHERE_SERVER }'
    template: '${ VSPHERE_HAPROXY_TEMPLATE }'
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: VSphereCluster
metadata:
  name: '${ CLUSTER_NAME }'
  namespace: '${ NAMESPACE }'
spec:
  cloudProviderConfiguration:
    global:
      insecure: true
      secretName: cloud-provider-vsphere-credentials
      secretNamespace: kube-system
    network:
      name: '${ VSPHERE_NETWORK }'
    providerConfig:
      cloud:
        controllerImage: gcr.io/cloud-provider-vsphere/cpi/release/manager:v1.0.0
    virtualCenter:
      ${ VSPHERE_SERVER }:
        datacenters: '${ VSPHERE_DATACENTER }'
    workspace:
      datacenter: '${ VSPHERE_DATACENTER }'
      datastore: '${ VSPHERE_DATASTORE }'
      folder: '${ VSPHERE_FOLDER }'
      resourcePool: '${ VSPHERE_RESOURCE_POOL }'
      server: '${ VSPHERE_SERVER }'
  loadBalancerRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: HAProxyLoadBalancer
    name: '${ CLUSTER_NAME }'
  server: '${ VSPHERE_SERVER }'
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: VSphereMachineTemplate
metadata:
  name: '${ CLUSTER_NAME }'
  namespace: '${ NAMESPACE }'
spec:
  template:
    spec:
      cloneMode: linkedClone
      datacenter: '${ VSPHERE_DATACENTER }'
      datastore: '${ VSPHERE_DATASTORE }'
      diskGiB: 25
      folder: '${ VSPHERE_FOLDER }'
      memoryMiB: 8192
      network:
        devices:
        - dhcp4: true
          networkName: '${ VSPHERE_NETWORK }'
      numCPUs: 2
      resourcePool: '${ VSPHERE_RESOURCE_POOL }'
      server: '${ VSPHERE_SERVER }'
      template: '${ VSPHERE_TEMPLATE }'
---
apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
kind: KubeadmControlPlane
metadata:
  name: '${ CLUSTER_NAME }'
  namespace: '${ NAMESPACE }'
spec:
  infrastructureTemplate:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: VSphereMachineTemplate
    name: '${ CLUSTER_NAME }'
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: external
      controllerManager:
        extraArgs:
          cloud-provider: external
    initConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          cloud-provider: external
        name: '{{ ds.meta_data.hostname }}'
    joinConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          cloud-provider: external
        name: '{{ ds.meta_data.hostname }}'
    preKubeadmCommands:
    - hostname "{{ ds.meta_data.hostname }}"
    - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
    - echo "127.0.0.1   localhost" >>/etc/hosts
    - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
    - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
    useExperimentalRetryJoin: true
    users:
    - name: capv
      sshAuthorizedKeys:
      - '${ VSPHERE_SSH_AUTHORIZED_KEY }'
      sudo: ALL=(ALL) NOPASSWD:ALL
  replicas: ${ CONTROL_PLANE_MACHINE_COUNT }
  version: '${ KUBERNETES_VERSION }'
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
kind: KubeadmConfigTemplate
metadata:
  name: '${ CLUSTER_NAME }-md-0'
  namespace: '${ NAMESPACE }'
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs:
            cloud-provider: external
          name: '{{ ds.meta_data.hostname }}'
      preKubeadmCommands:
      - hostname "{{ ds.meta_data.hostname }}"
      - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
      - echo "127.0.0.1   localhost" >>/etc/hosts
      - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
      - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
      users:
      - name: capv
        sshAuthorizedKeys:
        - '${ VSPHERE_SSH_AUTHORIZED_KEY }'
        sudo: ALL=(ALL) NOPASSWD:ALL
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineDeployment
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: '${ CLUSTER_NAME }'
  name: '${ CLUSTER_NAME }-md-0'
  namespace: '${ NAMESPACE }'
spec:
  clusterName: '${ CLUSTER_NAME }'
  replicas: ${ WORKER_MACHINE_COUNT }
  selector:
    matchLabels: {}
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: '${ CLUSTER_NAME }'
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: KubeadmConfigTemplate
          name: '${ CLUSTER_NAME }-md-0'
      clusterName: '${ CLUSTER_NAME }'
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: VSphereMachineTemplate
        name: '${ CLUSTER_NAME }'
      version: '${ KUBERNETES_VERSION }'
---
apiVersion: addons.cluster.x-k8s.io/v1alpha3
kind: ClusterResourceSet
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: '${ CLUSTER_NAME }'
  name: ${ CLUSTER_NAME }-crs-0
  namespace: '${ NAMESPACE }'
spec:
  resources:
  - kind: Secret
    name: csi-vsphere-config
  - kind: Secret
    name: vsphere-csi-controller
  - kind: Secret
    name: vsphere-csi-controller-role
  - kind: Secret
    name: vsphere-csi-controller-binding
  - kind: Secret
    name: csi.vsphere.vmware.com
  - kind: Secret
    name: vsphere-csi-node
  - kind: Secret
    name: vsphere-csi-controller
---
apiVersion: addons.cluster.x-k8s.io/v1alpha3
kind: ClusterResourceSetBinding
metadata:
  name: csi-vsphere-config
  namespace: kube-system
  ownerReferences:
  - apiVersion: addons.cluster.x-k8s.io/v1alpha3
    kind: ClusterResourceSet
    name: ${ CLUSTER_NAME }-crs-0
    uid: ""
  - apiVersion: cluster.x-k8s.io/v1alpha3
    kind: Cluster
    name: '${ CLUSTER_NAME }'
    uid: ""
spec:
  bindings:
  - clusterResourceSetName: ${ CLUSTER_NAME }-crs-0
    resources:
    - applied: false
      kind: ""
      lastAppliedTime: null
      name: csi-vsphere-config
  - clusterResourceSetName: ${ CLUSTER_NAME }-crs-0
    resources:
    - applied: false
      kind: Secret
      lastAppliedTime: "2020-07-29T09:01:34Z"
      name: vsphere-csi-controller
  - clusterResourceSetName: ${ CLUSTER_NAME }-crs-0
    resources:
    - applied: false
      kind: Secret
      lastAppliedTime: "2020-07-29T09:01:34Z"
      name: vsphere-csi-controller-role
  - clusterResourceSetName: ${ CLUSTER_NAME }-crs-0
    resources:
    - applied: false
      kind: Secret
      lastAppliedTime: "2020-07-29T09:01:34Z"
      name: vsphere-csi-controller-binding
  - clusterResourceSetName: ${ CLUSTER_NAME }-crs-0
    resources:
    - applied: false
      kind: Secret
      lastAppliedTime: "2020-07-29T09:01:34Z"
      name: csi.vsphere.vmware.com
  - clusterResourceSetName: ${ CLUSTER_NAME }-crs-0
    resources:
    - applied: false
      kind: Secret
      lastAppliedTime: "2020-07-29T09:01:34Z"
      name: vsphere-csi-node
  - clusterResourceSetName: ${ CLUSTER_NAME }-crs-0
    resources:
    - applied: false
      kind: Secret
      lastAppliedTime: "2020-07-29T09:01:34Z"
      name: vsphere-csi-controller
